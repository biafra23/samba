plugins {
  id 'java'
  id 'java-library-distribution'
  id 'common-plugins'
  id 'de.undercouch.download'
}

group = 'samba.besu-plugin'

apply from: rootProject.file("gradle/java.gradle")
apply from: rootProject.file("gradle/dependency-management.gradle")
apply from: rootProject.file('gradle/common-dependencies.gradle')
apply from: rootProject.file("gradle/tests.gradle")
apply from: rootProject.file("gradle/build-aliases.gradle")
apply from: rootProject.file("gradle/lint.gradle")


dependencies {
  // annotationProcessor generates the file META-INF/services/org.hyperledger.besu.plugin.BesuPlugin
  annotationProcessor 'com.google.auto.service:auto-service'
  compileOnly 'com.google.auto.service:auto-service'

  implementation project(':service')

  implementation "${besuArtifactGroup}:besu-datatypes"
  implementation "${besuArtifactGroup}:plugin-api"
  implementation "${besuArtifactGroup}.internal:api"
  implementation "${besuArtifactGroup}.internal:core"

  implementation 'com.google.code.gson:gson'

  implementation 'io.tmio:tuweni-bytes'
  implementation 'io.tmio:tuweni-units'
  implementation 'io.tmio:tuweni-toml'

  implementation 'info.picocli:picocli'

  //    testImplementation "${besuArtifactGroup}.internal:besu"
  //    testImplementation group: "${besuArtifactGroup}.internal", name: "core", classifier: "test-support"
  //    testImplementation 'org.awaitility:awaitility'
}

test {
  useJUnitPlatform()
}

apply from: rootProject.file("gradle/dist.gradle")

////>>
//jar {
//  archiveBaseName.set("besu-samba-plugin")
//  archiveVersion.set(rootProject.version)
//
//  from {
//    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//  }
//  from sourceSets.main.output // Include compiled classes from core
//  from project(':service').sourceSets.main.output // Include compiled classes from service
//}
